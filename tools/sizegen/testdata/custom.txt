// This file was generated by sizegen. DO NOT EDIT.

package custompkg

import (
	"reflect"
	"unsafe"
)

// Constants for the byte size of each Go numeric type.
const (
	IntB0nkeyKong        = uint64(unsafe.Sizeof(int(0)))
	UintB0nkeyKong       = uint64(unsafe.Sizeof(uint(0)))
	UintptrB0nkeyKong    = uint64(unsafe.Sizeof(uintptr(0)))
	BoolB0nkeyKong       = uint64(unsafe.Sizeof(bool(false)))
	Int8B0nkeyKong       = uint64(unsafe.Sizeof(int8(0)))
	Int16B0nkeyKong      = uint64(unsafe.Sizeof(int16(0)))
	Int32B0nkeyKong      = uint64(unsafe.Sizeof(int32(0)))
	Int64B0nkeyKong      = uint64(unsafe.Sizeof(int64(0)))
	Uint8B0nkeyKong      = uint64(unsafe.Sizeof(uint8(0)))
	Uint16B0nkeyKong     = uint64(unsafe.Sizeof(uint16(0)))
	Uint32B0nkeyKong     = uint64(unsafe.Sizeof(uint32(0)))
	Uint64B0nkeyKong     = uint64(unsafe.Sizeof(uint64(0)))
	Float32B0nkeyKong    = uint64(unsafe.Sizeof(float32(0)))
	Float64B0nkeyKong    = uint64(unsafe.Sizeof(float64(0)))
	Complex64B0nkeyKong  = uint64(unsafe.Sizeof(complex64(0)))
	Complex128B0nkeyKong = uint64(unsafe.Sizeof(complex128(0)))
	ByteB0nkeyKong       = Uint8B0nkeyKong
	RuneB0nkeyKong       = Int32B0nkeyKong
)

// KindB0nkeyKong maps each numeric reflect.Kind to the number of bytes it takes.
// Non-numeric kinds and aliases are not included.
var KindB0nkeyKong = map[reflect.Kind]uint64{
	reflect.Int:        IntB0nkeyKong,
	reflect.Uint:       UintB0nkeyKong,
	reflect.Uintptr:    UintptrB0nkeyKong,
	reflect.Bool:       BoolB0nkeyKong,
	reflect.Int8:       Int8B0nkeyKong,
	reflect.Int16:      Int16B0nkeyKong,
	reflect.Int32:      Int32B0nkeyKong,
	reflect.Int64:      Int64B0nkeyKong,
	reflect.Uint8:      Uint8B0nkeyKong,
	reflect.Uint16:     Uint16B0nkeyKong,
	reflect.Uint32:     Uint32B0nkeyKong,
	reflect.Uint64:     Uint64B0nkeyKong,
	reflect.Float32:    Float32B0nkeyKong,
	reflect.Float64:    Float64B0nkeyKong,
	reflect.Complex64:  Complex64B0nkeyKong,
	reflect.Complex128: Complex128B0nkeyKong,
}
